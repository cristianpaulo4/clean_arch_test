// Mocks generated by Mockito 5.1.0 from annotations
// in mobx_teste/test/features/product/domain/usecase/use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;

import 'package:hasura_connect/hasura_connect.dart' as _i3;
import 'package:mobx_teste/shared/infra/http_impl/http_impl.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeStreamController_0<T> extends _i1.Fake
    implements _i2.StreamController<T> {}

class _FakeSnapshot_1<T> extends _i1.Fake implements _i3.Snapshot<T> {}

/// A class which mocks [HasuraImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHasuraImpl extends _i1.Mock implements _i4.HasuraImpl {
  MockHasuraImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StreamController<dynamic> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeStreamController_0<dynamic>())
          as _i2.StreamController<dynamic>);
  @override
  String get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: '') as String);
  @override
  Map<String, _i3.Snapshot<dynamic>> get snapmap =>
      (super.noSuchMethod(Invocation.getter(#snapmap),
              returnValue: <String, _i3.Snapshot<dynamic>>{})
          as Map<String, _i3.Snapshot<dynamic>>);
  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);
  @override
  void rootStreamListener(dynamic data) =>
      super.noSuchMethod(Invocation.method(#rootStreamListener, [data]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<dynamic> query(String? document,
          {String? key,
          Map<String, dynamic>? variables,
          Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#query, [document],
              {#key: key, #variables: variables, #headers: headers}),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> executeQuery(_i3.Query? query) =>
      (super.noSuchMethod(Invocation.method(#executeQuery, [query]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> mutation(String? document,
          {Map<String, dynamic>? variables,
          bool? tryAgain = true,
          String? key,
          Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#mutation, [
            document
          ], {
            #variables: variables,
            #tryAgain: tryAgain,
            #key: key,
            #headers: headers
          }),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> executeMutation(_i3.Query? query) =>
      (super.noSuchMethod(Invocation.method(#executeMutation, [query]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<_i3.Snapshot<dynamic>> subscription(String? document,
          {String? key,
          Map<String, dynamic>? variables,
          Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#subscription, [document],
                  {#key: key, #variables: variables, #headers: headers}),
              returnValue: Future<_i3.Snapshot<dynamic>>.value(
                  _FakeSnapshot_1<dynamic>()))
          as _i2.Future<_i3.Snapshot<dynamic>>);
  @override
  _i2.Future<_i3.Snapshot<dynamic>> executeSubscription(_i3.Query? query) =>
      (super.noSuchMethod(Invocation.method(#executeSubscription, [query]),
              returnValue: Future<_i3.Snapshot<dynamic>>.value(
                  _FakeSnapshot_1<dynamic>()))
          as _i2.Future<_i3.Snapshot<dynamic>>);
  @override
  void sendToWebSocketServer(String? input) =>
      super.noSuchMethod(Invocation.method(#sendToWebSocketServer, [input]),
          returnValueForMissingStub: null);
  @override
  String querySubscription(_i3.Query? query) =>
      (super.noSuchMethod(Invocation.method(#querySubscription, [query]),
          returnValue: '') as String);
  @override
  _i2.Future<void> normalizeStreamValue(Map<dynamic, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#normalizeStreamValue, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
}
